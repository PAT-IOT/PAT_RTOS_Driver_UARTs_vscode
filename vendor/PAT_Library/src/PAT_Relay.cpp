#include <Arduino.h>
#include <PAT_Relay.h>
// #include "PAT_Task_MCU.h"
// #include "PAT_JSON.h"

//////////////////////////////////////////////////////////////////////////Fix Config////////////////////////////////////////////////////////////////////////////////////
const uint8_t _RELAY1_PIN = 4;
const uint8_t _RELAY2_PIN = 2;
const uint8_t _RELAY3_PIN = 15;
const uint8_t _RELAY4_PIN = 13;
const uint8_t _RELAY1_ACTIVE_MODE = HIGH;
const uint8_t _RELAY2_ACTIVE_MODE = HIGH;
const uint8_t _RELAY3_ACTIVE_MODE = HIGH;
const uint8_t _RELAY4_ACTIVE_MODE = HIGH;
////////////////////////////////////////////////////////////////////////Class Definitions//////////////////////////////////////////////////////////////////////////////////////
class_Relay relay[] = {  //relayObjects
    class_Relay(_RELAY1_PIN, _RELAY1_ACTIVE_MODE),
    class_Relay(_RELAY2_PIN, _RELAY2_ACTIVE_MODE),
    class_Relay(_RELAY3_PIN, _RELAY3_ACTIVE_MODE),
    class_Relay(_RELAY4_PIN, _RELAY4_ACTIVE_MODE)
};
//class_Array<_RELAYS_FIRST_INDEX, _RELAYS_LAST_INDEX, class_Relay> relay(relayObjects);
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//class_Array<1, 4, class_Relay, uint8_t, bool> RelayArray(Relay1_PIN, true),RelayArray(Relay2_PIN, true),RelayArray(Relay3_PIN, true),RelayArray(Relay4_PIN, true);


//class_Relay RelayArray[] = {relay1, relay2, relay3, relay4};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// extern class_MCU MCU; // Use the UART2
// extern class_UserBuffer ubuf;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void task_Relay(void) { 

/*
  MCU.println(ubuf.action_relay(ubuf.relay[4], ubuf.relay[5], ubuf.relay[6], ubuf.relay[7], ubuf.relay[8], ubuf.relay[9], ubuf.relay[10], ubuf.relay[11]));
  MCU.flush();
  
  relay[0](ubuf.relay[0]);
  relay[1](ubuf.relay[1]);
  relay[2](ubuf.relay[2]);
  relay[3](ubuf.relay[3]);
*/
  /*
    int relay[8] = { 0, 1, 0, 1, 0, 1, 0, 1 };
    MCU.println(ubuf.action_relay(relay, 0));
    MCU.flush();
    vTaskDelay(2000 / portTICK_PERIOD_MS);
    int relay2[] = {1, 0, 1, 0, 1, 0, 1, 0};
    MCU.println(ubuf.action_relay(relay2, 0));
    Serial.println(ubuf.action_relay(relay2, 0));
    MCU.flush();
    vTaskDelay(2000 / portTICK_PERIOD_MS);
    */
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



float mapFloat(float value, float inMin, float inMax, float outMin, float outMax) {
  return (value - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class_Relay::class_Relay(uint8_t pin, bool activeMode)
  : pin(pin), mode(activeMode){
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void class_Relay::operator()(bool activeMode) {
(activeMode == mode) ? turnOn() : turnOff();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void class_Relay::init() {
  pinMode(pin, OUTPUT);
  turnOff();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void class_Relay::turnOn() {
  digitalWrite(pin, mode);
  this->isOn = mode;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void class_Relay::turnOff() {
  digitalWrite(pin, !mode);
  isOn = !mode;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool class_Relay::getState() {
  return isOn;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void class_Relay::toggle() {
  (isOn==mode) ? this->turnOff() : this->turnOn();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

