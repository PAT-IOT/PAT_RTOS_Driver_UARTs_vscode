
////////////////////////////////////////////////////////////////////////help//////////////////////////////////////////////////////////////////////////////////////

// const uint8_t _RELAY1_PIN = 4;
// const uint8_t _RELAY2_PIN = 2;
// const uint8_t _RELAY3_PIN = 15;
// const uint8_t _RELAY4_PIN = 13;
// const uint8_t _RELAY1_ACTIVE_MODE = HIGH;
// const uint8_t _RELAY2_ACTIVE_MODE = HIGH;
// const uint8_t _RELAY3_ACTIVE_MODE = HIGH;
// const uint8_t _RELAY4_ACTIVE_MODE = HIGH;
//------------------------------------------------
// class_Relay relay[] = {  //relayObjects
//     class_Relay(_RELAY1_PIN, _RELAY1_ACTIVE_MODE),
//     class_Relay(_RELAY2_PIN, _RELAY2_ACTIVE_MODE),
//     class_Relay(_RELAY3_PIN, _RELAY3_ACTIVE_MODE),
//     class_Relay(_RELAY4_PIN, _RELAY4_ACTIVE_MODE)
// };
//class_Array<_RELAYS_FIRST_INDEX, _RELAYS_LAST_INDEX, class_Relay> relay(relayObjects);  
//------------------------------------------------
//call this object in the loop 
// relay[0](ubuf.relay[0]);
// relay[1](ubuf.relay[1]);
// relay[2](ubuf.relay[2]);
// relay[3](ubuf.relay[3]);
//------------------------------------------------

#include <Arduino.h>
#include <PAT_IO_Devices.h>
// #include "PAT_Task_MCU.h"
// #include "PAT_JSON.h"

//////////////////////////////////////////////////////////////////////////Fix Config////////////////////////////////////////////////////////////////////////////////////
const uint8_t LED_WiFi_PIN = 33;
const uint8_t LED_WiFi_MODE = HIGH;
const uint8_t LED_NRF_PIN = 32;
const uint8_t LED_NRF_MODE = HIGH;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int PUSHBUTTON_RESETPASSWORD_PIN = 39;
const int PUSHBUTTON_WEBSERVER_PIN = 34;
//////////////////////////////////////////////////////////////////////Class Definitions/////////////////////////////////////////////////////////////////////////////////////////
class_Input  pushButton_WebServer(PUSHBUTTON_RESETPASSWORD_PIN, pushButton_WebServer_handel);
class_Input  pushButton_ResetPassword(PUSHBUTTON_RESETPASSWORD_PIN, pushButton_ResetPassword_handel);

////////////////////////////////////////////////////////////////////////Class Definitions//////////////////////////////////////////////////////////////////////////////////////
class_Digital_Output led_wifi(LED_WiFi_PIN,LED_WiFi_MODE);
class_Digital_Output led_nrf(LED_NRF_PIN,LED_NRF_MODE);


//temperatureRead();
// void delay(uint32_t ms)
// {
//     vTaskDelay(ms / portTICK_PERIOD_MS);
// }



// void init_IO_Devices(void) {
//   pushButton_WebServer.init();
//   pushButton_ResetPassword.init();
//   led_wifi.init();
//   led_nrf.init();

// }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
float mapFloat(float value, float inMin, float inMax, float outMin, float outMax) {
  return (value - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class_Digital_Output::class_Digital_Output(uint8_t pin, bool activeMode)
  : pin(pin), mode(activeMode) {
  
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void class_Digital_Output::operator()(bool activeMode) {
(activeMode == mode) ? turnOn() : turnOff();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void class_Digital_Output::init() {
  pinMode(pin, OUTPUT);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void class_Digital_Output::turnOn() {
  if (this->status_t == IO_FLOATING)
  {
    pinMode(pin, OUTPUT);
  }
    this->status_t = IO_TURNED_ON;
    digitalWrite(pin, mode);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void class_Digital_Output::turnOff() {
  if (this->status_t == IO_FLOATING)
  {
    pinMode(pin, OUTPUT);
  }
  this->status_t = IO_TURNED_OFF;
    digitalWrite(pin, !mode);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void class_Digital_Output::floating() {
  pinMode(pin,OPEN_DRAIN);     // Set GPIO pin to float
  this->status_t = IO_FLOATING;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void class_Digital_Output::toggleOnFloating() {

  if (this->status_t == IO_FLOATING)
  {
    this->turnOn();
  }
  else
  {
  this->floating();
  }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void class_Digital_Output::toggleOffFloating() {
  if (this->status_t == IO_FLOATING)
  {
    this->turnOff();
  }
  else
  {
    this->floating();
  }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
IO_status_t class_Digital_Output::status() {
  return this->status_t;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void class_Digital_Output::toggle() {
  (this->status_t == this->mode) ? this->turnOff() : this->turnOn();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class_Input::class_Input(uint8_t pin, void (*routine)(void), uint8_t state, uint8_t mode)
  : pin(pin), handel(routine), state(state), mode(mode), cunter(0) {
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void class_Input::init() {
  pinMode(pin, state);
  attachInterrupt(digitalPinToInterrupt(this->pin), this->handel, this->mode);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 void pushButton_WebServer_handel(void) {  
unsigned static long lastDebounceTime = 0;
  if ((millis() - lastDebounceTime) > _PUSHBUTTON_DEBOUNCE_DELAY) {
      lastDebounceTime = millis();
          pushButton_WebServer.cunter++;
  }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void pushButton_ResetPassword_handel(void) {
unsigned static long lastDebounceTime = 0;
  if ((millis() - lastDebounceTime) > _PUSHBUTTON_DEBOUNCE_DELAY) {
      lastDebounceTime = millis();
           pushButton_ResetPassword.cunter++;
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
